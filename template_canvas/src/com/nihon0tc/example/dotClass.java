package com.nihon0tc.example;// see http://android20092009.blog67.fc2.com/blog-entry-27.htmlimport java.nio.ByteBuffer;import java.nio.ByteOrder;import java.nio.IntBuffer;import java.util.Random;import javax.microedition.khronos.egl.EGLConfig;import javax.microedition.khronos.opengles.GL10;import com.nihon0tc.util.LogUtil;import android.content.Context;import android.opengl.GLSurfaceView;import android.opengl.GLU;import android.util.AttributeSet;public class dotClass extends GLSurfaceView implements GLSurfaceView.Renderer{	private int dispWidth = 0;	private int dispHeight = 0;	private static Random rand = new Random();	private int one = 0x10000;	// 固定小数点で=1	private int pointNum = 1000;	// 描画数		public dotClass( Context ctx){		super( ctx );		Init();		//　初期化	}		int layout_width = 320;	int layout_height = 480;	String sColor = "ffffff";	public dotClass( Context ctx, AttributeSet attrs){		super( ctx, attrs );		Init();		//　初期化		/*		String sWidth = attrs.getAttributeValue(null, "android:layout_width");		String sHeight = attrs.getAttributeValue(null, "android:layout_height");		layout_width = new Integer(sWidth.substring(0,sWidth.length()-2));		layout_height = new Integer(sHeight.substring(0,sWidth.length()-2));		setMinimumWidth(layout_width);		setMinimumHeight(layout_height);		*/		sColor = attrs.getAttributeValue(null, "background");	}	//　初期化	private void Init(){		//　レンダラーの指定		this.setRenderer( this );	}    //　画面初期化    public void onSurfaceCreated( GL10 gl, EGLConfig config ){    	//gl.glClearColor( 0.0f, 0.0f, 0.0f, 1.0f );	//　サーフェイスクリア色の指定　RGBA    	gl.glClearColor( Short.parseShort(sColor.substring(0, 1), 16), Short.parseShort(sColor.substring(2, 3), 16), Short.parseShort(sColor.substring(4, 5), 16), 1.0f );	//　サーフェイスクリア色の指定　RGBA    	    	    	gl.glShadeModel( GL10.GL_FLAT );	//　フラットシェーディング    	gl.glHint( GL10.GL_POINT_SMOOTH_HINT, GL10.GL_FASTEST );	//　補完精度を速度優先に変更        	gl.glEnableClientState( GL10.GL_VERTEX_ARRAY );	//　頂点配列の許可    	gl.glEnableClientState( GL10.GL_COLOR_ARRAY );	//　色情報配列の許可    	gl.glDisable( GL10.GL_TEXTURE_2D );	//　テクスチャは使わない    }        //　サーフェース変更    public void onSurfaceChanged( GL10 gl, int width, int height ){    	//　画面サイズの記憶    	dispWidth = width;    	dispHeight = height;    	LogUtil.info("dispWidth=" + dispWidth);    	LogUtil.info("dispHeight=" + dispHeight);    	width = getWidth();    	height = getHeight();    	LogUtil.info("width=" + width);    	LogUtil.info("height=" + height);    	    	width = layout_width;    	height =  layout_height;    	LogUtil.info("layout_width=" + layout_width);    	LogUtil.info("layout_height=" + layout_height);    	// Densityの値を取得    	float tmpDensity = getContext().getResources().getDisplayMetrics().density;    	LogUtil.info("tmpDensity=" + tmpDensity);    	width = (int)((float)layout_width * tmpDensity);    	height =  (int)((float)layout_height * tmpDensity);    	    	gl.glViewport( 0, 0, width, height );	// ビューポートの再セット    	//　射影行列の指定    	gl.glMatrixMode( GL10.GL_PROJECTION );	//　射影行列（プロジェクションモード）    	gl.glLoadIdentity();	//　単位行列のセット    	GLU.gluOrtho2D( gl, 0.0f, width, 0.0f, height );	//　投影変換（画面左下を(0,0)としたクリッピング設定）    	    }            //　描画    public void onDrawFrame( GL10 gl ){    	gl.glClear( GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT );	//　描画バッファクリア＆背景塗りつぶし    	    	int x = 0;    	int y = 0;    	int i = 0,j=0;    	int vertex[] = new int[pointNum * 2];    	int color[] = new int[pointNum * 4];    	//　pointNum個ほど描いてみる    	for( i=0 ; i<pointNum ; i++ ){    		if( dispWidth != 0 ){    			x = rand.nextInt(dispWidth);    		}    		if( dispHeight != 0 ){    			y = rand.nextInt(dispHeight);    		}    		vertex[i*2] = x * 0x10000;	//　固定小数点    		vertex[i*2+1] = y * 0x10000;	//　固定小数点    		    		for( j=0 ; j<4 ; j++ ){    			color[i*4 + j] = one;    		}    	}    	drawPoint( gl, vertex, color, 5 );    	try{    		Thread.sleep( 17 );    	} catch ( InterruptedException e ){    	}//    	System.gc();	//　ガベコレ対策＆sleep代わり    }    //　点描画    private void drawPoint( GL10 gl, int[] vertex, int[] color, int size ){		gl.glPointSize( size );	//　描画サイズをsizeにする				gl.glVertexPointer( 2, GL10.GL_FIXED, 0, getIntBuffer( vertex ) );	//　表示座標のセット		gl.glColorPointer( 4, GL10.GL_FIXED, 0, getIntBuffer( color ) );	//　カラーのセット    	gl.glDrawArrays( GL10.GL_POINTS, 0, pointNum );	//　pointNumだけ描画する    }    //　Intバッファの生成    private IntBuffer getIntBuffer( int[] table ) {        ByteBuffer bb = ByteBuffer.allocateDirect( table.length * 4 );	//　まずはByteBufferを確保        bb.order( ByteOrder.nativeOrder() );	//　オーダータイプの設定        IntBuffer ib = bb.asIntBuffer();	//　IntBufferをByteBufferサイズから確保        ib.put( table );	// IntBufferに押し込む        ib.position( 0 );	//　IntBufferの位置を先頭に        return ib;    }}